{"version":3,"sources":["MyComponents/Title.jsx","MyComponents/Weather.jsx","MyComponents/Form.jsx","App.js","reportWebVitals.js","index.js"],"names":["Title","props","className","style","marginTop","color","font","opacity","fontFamily","fontSize","fontWeight","lineHeight","title","Weather","city","a","axios","get","params","q","units","APPID","data","Form","onCityChange","weather","search","handleCityChange","useCallback","e","target","value","headingstyle","backgroundColor","background","htmlFor","type","id","placeholder","onChange","onClick","main","moment","format","name","sys","country","temp","src","icon","alt","description","feels_like","pressure","humidity","wind","speed","clouds","all","Date","sunrise","toLocaleTimeString","sunset","App","useState","setCity","setWeather","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.874c634f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nfunction Title(props) {\r\n  let titlestyle = {\r\n    marginTop: \"20px\",\r\n    color: \"black\",\r\n    font: \"sans-serif\",\r\n    opacity: \"0.7\",\r\n    fontFamily: \"Trocchi, serif\",\r\n    fontSize: \"45px\",\r\n    fontWeight: \"normal\",\r\n    lineHeight: \"48px\",\r\n  };\r\n\r\n  let pstyle = {\r\n    fontSize: \"20px\",\r\n    color: \"black\",\r\n  };\r\n  return (\r\n    <div>\r\n      <center>\r\n        <h1 className=\"retro\" style={titlestyle}>\r\n          {props.title}\r\n        </h1>\r\n        <p style={pstyle}>\r\n          (Helps you to find the weather conditions in your city)\r\n        </p>\r\n      </center>\r\n    </div>\r\n  );\r\n}\r\nTitle.propTypes = {\r\n  title: propTypes.string,\r\n};\r\n\r\nexport default Title;\r\n","import axios from \"axios\";\r\n\r\nconst URL = \"https://api.openweathermap.org/data/2.5/weather\";\r\nconst API_key = \"c062b3fce8c3d2bba22f0f082d0e141a\";\r\n\r\nexport const Weather = async (city) => {\r\n  const { data } = await axios.get(URL, {\r\n    params: {\r\n      q: city,\r\n      units: \"metric\",\r\n      APPID: API_key,\r\n    },\r\n  });\r\n  return data;\r\n};\r\n","import React, { useCallback } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport moment from \"moment\";\r\n\r\nexport const Form = ({ city, onCityChange, weather, search }) => {\r\n  const handleCityChange = useCallback(\r\n    (e) => {\r\n      onCityChange(e.target.value);\r\n    },\r\n    [onCityChange]\r\n  );\r\n\r\n  let headingstyle = {\r\n    color: \"darkblue\",\r\n  };\r\n\r\n  let bgstyle = {\r\n    backgroundColor: \"rgb (245,245,245)\",\r\n    background: \"rgba(245,245,245, 0.5)\",\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div\r\n            className=\"col-md-6 col-10  offset-1 r-cell  mx-auto mb-5 \"\r\n            style={bgstyle}\r\n          >\r\n            <div className=\"form-group\">\r\n              <div className=\"input\">\r\n                <label htmlFor=\"city\"></label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"city\"\r\n                  className=\"search mx-auto\"\r\n                  placeholder=\"Enter your city\"\r\n                  value={city}\r\n                  onChange={handleCityChange}\r\n                />\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"btn btn-md btn-info ml-3\"\r\n                  onClick={() => search()}\r\n                >\r\n                  Get Weather\r\n                </button>\r\n              </div>\r\n              {weather.main && (\r\n                <div className=\"city\">\r\n                  <div className=\"city-day\">\r\n                    <h1 style={headingstyle}>{moment().format(\"dddd\")}</h1>\r\n                  </div>\r\n\r\n                  <div className=\"city-date\">\r\n                    <h2 style={headingstyle}>{moment().format(\"LL\")}</h2>\r\n                  </div>\r\n\r\n                  <h2 className=\"city-name\">\r\n                    <span>{weather.name}</span>\r\n                    <sup>{weather.sys.country}</sup>\r\n                  </h2>\r\n\r\n                  <div className=\"city-temp\">\r\n                    {weather.main.temp}\r\n                    <sup>&deg;C</sup>\r\n                  </div>\r\n\r\n                  <div className=\"city-info\">\r\n                    <img\r\n                      className=\"city-icon\"\r\n                      src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\r\n                      alt={weather.weather[0].description}\r\n                    />\r\n                    <p>{weather.weather[0].description}</p>\r\n                    <div className=\"city-feels-like\">\r\n                      Feels like : {weather.main.feels_like}\r\n                      <sup>&deg;C</sup>\r\n                    </div>\r\n\r\n                    <div className=\"city-pressure\">\r\n                      Pressure : {weather.main.pressure} hPa\r\n                    </div>\r\n\r\n                    <div className=\"city-humidity\">\r\n                      Humidity : {weather.main.humidity} %\r\n                    </div>\r\n\r\n                    <div className=\"city-wind\">\r\n                      Wind Speed : {weather.wind.speed} m/sec\r\n                    </div>\r\n\r\n                    <div className=\"city-cloud\">\r\n                      Cloudiness : {weather.clouds.all} %\r\n                    </div>\r\n\r\n                    <div className=\"city-sunrise\">\r\n                      <p>\r\n                        Sunrise:{\" \"}\r\n                        {new Date(\r\n                          weather.sys.sunrise * 1000\r\n                        ).toLocaleTimeString(\"en-IN\")}\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className=\"city-sunset\">\r\n                      <p>\r\n                        Sunset:{\" \"}\r\n                        {new Date(weather.sys.sunset * 1000).toLocaleTimeString(\r\n                          \"en-IN\"\r\n                        )}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Title from \"./MyComponents/Title\";\nimport { Weather } from \"./MyComponents/Weather\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form } from \"./MyComponents/Form\";\n\nconst App = () => {\n  const [city, setCity] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const search = async (e) => {\n    if (city) {\n      const data = await Weather(city);\n\n      setWeather(data);\n      setCity(\"\");\n    } else {\n      alert(\"Please enter your city\");\n    }\n\n    if (!city) {\n      <p>Sorry we couldn't find your search</p>;\n    }\n  };\n\n  return (\n    <>\n      <Title title=\"Weather-App\" />\n      <Form\n        city={city}\n        onCityChange={setCity}\n        weather={weather}\n        search={search}\n      />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}